# Example GitHub Actions Workflow for Service Repository
# Copy this file to your service repository at: .github/workflows/validate-api.yml
#
# This example demonstrates validation of GENERATED API specifications.
# It shows how to generate specs during validation and test them before deployment.

name: Validate API Configuration

on:
  # Validate on pull requests to catch issues early
  pull_request:
    paths:
      - 'specs/**'
      - 'deployment/**'
      - 'src/**'
      
  # Validate on pushes to feature branches
  push:
    branches-ignore:
      - main
      - develop
    # paths:
    #   - 'specs/**'
    #   - 'deployment/**'
      
  # Allow manual validation
  workflow_dispatch:
    inputs:
      validate_deployment:
        description: 'Perform deployment validation (dry run)'
        type: boolean
        default: true

env:
  SERVICE_NAME: hello-world  # Change this to your service name
  API_CONFIG_PATH: deployment/api-config.yml
#   API_SPEC_PATH: specs/openapi.yaml

  # Note: API specs are generated during build, not committed to repo

jobs:
  # vars workaround
  vars:
    runs-on: ubuntu-22.04
    outputs:
      SERVICE_NAME: ${{ env.SERVICE_NAME }}
      API_CONFIG_PATH: ${{ env.API_CONFIG_PATH}}
    steps:
      - run: echo "Exposing env vars"  
  # Build, test, and generate API specifications
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      api-spec-generated: ${{ steps.generate-spec.outputs.spec-generated }}
      spec-file-name: ${{ steps.generate-spec.outputs.spec-file-name }}
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
    
    - name: Setup build environment
      run: python -m venv .venv && source .venv/bin/activate && pip install -r requirements.txt
       
        
    - name: Install dependencies
      run: |
        # Add your dependency installation here
        # Example for Node.js:
        # npm ci
        echo "Installing dependencies..."
        
    - name: Generate API specification
      id: generate-spec
      run: |
        echo "üîß Generating API specification from code..."

        mkdir -p specs

        source .venv/bin/activate && python export_openapi_yaml.py 

        # Verify spec was generated
        SPEC_FILE="specs/openapi.yaml"
        if [[ -f "$SPEC_FILE" ]]; then
          echo "‚úÖ API specification generated: $SPEC_FILE"
          echo "spec-generated=true" >> $GITHUB_OUTPUT
          echo "spec-file-name=openapi.yml" >> $GITHUB_OUTPUT
          
          # Validate the generated spec
          npx @apidevtools/swagger-cli validate "$SPEC_FILE"
          echo "‚úÖ Generated API specification is valid"
        else
          echo "‚ùå Failed to generate API specification"
          exit 1
        fi
        
    
    - name: Upload API specification artifact
      uses: actions/upload-artifact@v4
      with:
        name: api-specs
        path: specs/
        retention-days: 7
        
    - name: Upload build artifacts (config only)
      uses: actions/upload-artifact@v4
      with:
        name: service-artifacts
        path: |
          ${{ env.API_CONFIG_PATH }}
        retention-days: 7
        
  # Validate API configuration using generated specs
  validate-api-config:
    needs: [build-and-test, vars]
    uses: shane-m-holland/azure-apim-bicep/.github/workflows/validate-config.yml@main
    with:
      environment: all
      api-config-path: ${{ needs.vars.outputs.API_CONFIG_PATH }}
    #   api-spec-path: ${{ needs.build-and-test.outputs.spec-file-name }}
      config-repo: shane-m-holland/example-apim-infrastructure
      # Note: Validation workflow will need to be updated to support artifacts
      # For now, this validates the config structure
    secrets:
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
        
  # Comment on PR with validation results
  comment-on-pr:
    needs: [validate-api-config]
    if: always() && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
    - name: Determine validation status
      id: status
      run: |
        if [[ 
              "${{ needs.validate-api-config.result }}" == "success") ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=All validations passed! ‚úÖ" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=Some validations failed ‚ùå" >> $GITHUB_OUTPUT
        fi
        
    - name: Comment on PR
      uses: actions/github-script@v7
      with:
        script: |
          const status = '${{ steps.status.outputs.status }}';
          const message = '${{ steps.status.outputs.message }}';
          
          let body = `## üîç API Validation Results\n\n${message}\n\n`;
          body += `### Validation Summary:\n`;
          body += `- **API Configuration**: ${{ needs.validate-api-config.result == 'success' && '‚úÖ Valid' || '‚ùå Failed' }}\n`;
          
          body += `\n**Service**: ${{ env.SERVICE_NAME }}\n`
          body += `**Config**: ${{ env.API_CONFIG_PATH }}\n`;
          
          if (status === 'success') {
            body += `\nüöÄ **Ready for deployment!** This API configuration will deploy successfully.`;
          } else {
            body += `\nüö® **Issues found!** Please fix the validation errors before merging.`;
          }
          
          body += `\n\n[View workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });